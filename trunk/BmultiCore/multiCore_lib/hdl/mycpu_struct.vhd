-- VHDL Entity multiCore_lib.mycpu.symbol
--
-- Created:
--          by - mg255.bin (cparch06.ecn.purdue.edu)
--          at - 19:33:52 11/12/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY mycpu IS
   PORT( 
      CLK      : IN     std_logic;
      nReset   : IN     std_logic;
      ramState : IN     std_logic_vector (1 DOWNTO 0);
      ramAddr  : OUT    std_logic_vector (31 DOWNTO 0);
      ramRen   : OUT    std_logic;
      ramWen   : OUT    std_logic;
      ramData  : OUT    std_logic_vector (31 DOWNTO 0);
      ramQ     : IN     std_logic_vector (31 DOWNTO 0)
   );

-- Declarations

END mycpu ;

--
-- VHDL Architecture multiCore_lib.mycpu.struct
--
-- Created:
--          by - mg255.bin (cparch06.ecn.purdue.edu)
--          at - 19:33:52 11/12/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
-- 
-- 
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY std;
USE std.textio.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_textio.all;

LIBRARY multiCore_lib;

ARCHITECTURE struct OF mycpu IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL PC0          : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_MemWr1   : std_logic;
   SIGNAL PC1          : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_MEM2REG0 : std_logic;
   SIGNAL MEM_Out1     : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_Out0     : std_logic_vector(31 DOWNTO 0);
   SIGNAL MemRdData0   : std_logic_vector(31 DOWNTO 0);
   SIGNAL MemRdData    : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_BusB0    : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_BusB1    : std_logic_vector(31 DOWNTO 0);
   SIGNAL WB_Halt1     : std_logic;
   SIGNAL iMemData0    : std_logic_vector(31 DOWNTO 0);
   SIGNAL iMemData1    : std_logic_vector(31 DOWNTO 0);
   SIGNAL MemWait0     : std_logic;
   SIGNAL aMemRead0    : std_logic;
   SIGNAL aMemWrite0   : std_logic;
   SIGNAL aMemWrData0  : std_logic_vector(31 DOWNTO 0);
   SIGNAL aMemRead1    : std_logic;
   SIGNAL aMemAddr1    : std_logic_vector(31 DOWNTO 0);
   SIGNAL aMemWrite1   : std_logic;
   SIGNAL aMemWrData1  : std_logic_vector(31 DOWNTO 0);
   SIGNAL iMemRead1    : std_logic;
   SIGNAL aiMemState   : std_logic_vector(1 DOWNTO 0);
   SIGNAL aiMemData1   : std_logic_vector(31 DOWNTO 0);
   SIGNAL cMemWait0    : std_logic;
   SIGNAL aMemRdData0  : std_logic_vector(31 DOWNTO 0);
   SIGNAL cMemWait1    : std_logic;
   SIGNAL aMemRdData1  : std_logic_vector(31 DOWNTO 0);
   SIGNAL MEM_MemWr0   : std_logic;
   SIGNAL WB_Halt0     : std_logic;
   SIGNAL aMemAddr0    : std_logic_vector(31 DOWNTO 0);
   SIGNAL finalHalt0   : std_logic;
   SIGNAL finalHalt1   : std_logic;
   SIGNAL MEM_MEM2REG1 : std_logic;
   SIGNAL aiMemRead1   : std_logic;
   SIGNAL aiMemAddr1   : std_logic_vector(31 DOWNTO 0);
   SIGNAL aiMemRead0   : std_logic;
   SIGNAL aiMemAddr0   : std_logic_vector(31 DOWNTO 0);
   SIGNAL MemWait1     : std_logic;
   SIGNAL cpuwait0     : std_logic;
   SIGNAL cpuwait1     : std_logic;
   SIGNAL cMemAddr0    : std_logic_vector(31 DOWNTO 0);
   SIGNAL cMemSnoopEn0 : std_logic;
   SIGNAL cMemHit0     : std_logic;
   SIGNAL cMemData0    : std_logic_vector(31 DOWNTO 0);
   SIGNAL cMemAddr     : std_logic_vector(31 DOWNTO 0);
   SIGNAL cMemSnoopEn  : std_logic;
   SIGNAL cMemHit      : std_logic;
   SIGNAL cMemData     : std_logic_vector(31 DOWNTO 0);
   SIGNAL cWait1       : std_logic;
   SIGNAL cWait0       : std_logic;
   SIGNAL aMemRead     : std_logic;
   SIGNAL aMemWrite    : std_logic;
   SIGNAL aMemAddr     : std_logic_vector(31 DOWNTO 0);
   SIGNAL aMemRdData   : std_logic_vector(31 DOWNTO 0);
   SIGNAL busy         : std_logic;
   SIGNAL arbWait0     : std_logic;
   SIGNAL arbWait1     : std_logic;
   SIGNAL aMemWait0    : std_logic;
   SIGNAL aMemWait1    : std_logic;
   SIGNAL ihit0        : std_logic;
   SIGNAL ihit1        : std_logic;
   SIGNAL iMemRead0    : std_logic;
   SIGNAL aiMemData0   : std_logic_vector(31 DOWNTO 0);


   -- Component Declarations
   COMPONENT Arbitor
   PORT (
      CLK        : IN     std_logic ;
      nReset     : IN     std_logic ;
      ramQ       : IN     std_logic_vector (31 DOWNTO 0);
      ramState   : IN     std_logic_vector (1 DOWNTO 0);
      aiMemAddr1 : IN     std_logic_vector (31 DOWNTO 0);
      aiMemRead1 : IN     std_logic ;
      aiMemData1 : OUT    std_logic_vector (31 DOWNTO 0);
      iMemRead1  : OUT    std_logic ;
      ramAddr    : OUT    std_logic_vector (31 DOWNTO 0);
      ramData    : OUT    std_logic_vector (31 DOWNTO 0);
      ramRen     : OUT    std_logic ;
      ramWen     : OUT    std_logic ;
      aiMemRead0 : IN     std_logic ;
      aiMemAddr0 : IN     std_logic_vector (31 DOWNTO 0);
      aMemRead   : IN     std_logic ;
      aMemWrite  : IN     std_logic ;
      aMemAddr   : IN     std_logic_vector (31 DOWNTO 0);
      aMemRdData : OUT    std_logic_vector (31 DOWNTO 0);
      arbWait1   : OUT    std_logic ;
      arbWait0   : OUT    std_logic ;
      busy       : OUT    std_logic ;
      iMemRead0  : OUT    std_logic ;
      aiMemData0 : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT IcacheTop
   PORT (
      aiMemData  : IN     std_logic_vector (31 DOWNTO 0);
      aiMemState : IN     std_logic_vector (1 DOWNTO 0);
      clk        : IN     std_logic;
      iMemAddr   : IN     std_logic_vector (31 DOWNTO 0);
      iMemRead   : IN     std_logic;
      nReset     : IN     std_logic;
      aiMemAddr  : OUT    std_logic_vector (31 DOWNTO 0);
      aiMemRead  : OUT    std_logic;
      iMemData   : OUT    std_logic_vector (31 DOWNTO 0);
      ihit       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT coheranceCont
   PORT (
      CLK          : IN     std_logic ;
      MemWait0     : IN     std_logic ;
      MemWait1     : IN     std_logic ;
      aMemAddr0    : IN     std_logic_vector (31 DOWNTO 0);
      aMemAddr1    : IN     std_logic_vector (31 DOWNTO 0);
      aMemRdData   : IN     std_logic_vector (31 DOWNTO 0);
      aMemRead0    : IN     std_logic ;
      aMemRead1    : IN     std_logic ;
      aMemWrData0  : IN     std_logic_vector (31 DOWNTO 0);
      aMemWrData1  : IN     std_logic_vector (31 DOWNTO 0);
      aMemWrite0   : IN     std_logic ;
      aMemWrite1   : IN     std_logic ;
      busy         : IN     std_logic ;
      cMemData     : IN     std_logic_vector (31 DOWNTO 0);
      cMemData0    : IN     std_logic_vector (31 DOWNTO 0);
      cMemHit      : IN     std_logic ;
      cMemHit0     : IN     std_logic ;
      finalHalt0   : IN     std_logic ;
      finalHalt1   : IN     std_logic ;
      nReset       : IN     std_logic ;
      ramState     : IN     std_logic_vector (1 DOWNTO 0);
      aMemAddr     : OUT    std_logic_vector (31 DOWNTO 0);
      aMemRdData0  : OUT    std_logic_vector (31 DOWNTO 0);
      aMemRdData1  : OUT    std_logic_vector (31 DOWNTO 0);
      aMemRead     : OUT    std_logic ;
      aMemWrite    : OUT    std_logic ;
      cMemAddr     : OUT    std_logic_vector (31 DOWNTO 0);
      cMemAddr0    : OUT    std_logic_vector (31 DOWNTO 0);
      cMemSnoopEn  : OUT    std_logic ;
      cMemSnoopEn0 : OUT    std_logic ;
      cMemWait0    : OUT    std_logic ;
      cMemWait1    : OUT    std_logic ;
      cWait0       : OUT    std_logic ;
      cWait1       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT dcache
   PORT (
      CLK         : IN     std_logic;
      Halt        : IN     std_logic;
      MemAddr     : IN     std_logic_vector (31 DOWNTO 0);
      MemRead     : IN     std_logic;
      MemWrData   : IN     std_logic_vector (31 DOWNTO 0);
      MemWrite    : IN     std_logic;
      aMemRdData  : IN     std_logic_vector (31 DOWNTO 0);
      aMemState   : IN     std_logic_vector (1 DOWNTO 0);
      aMemWait    : IN     std_logic;
      cMemAddr    : IN     std_logic_vector (31 DOWNTO 0);
      cMemSnoopEn : IN     std_logic;
      nReset      : IN     std_logic;
      MemRdData   : OUT    std_logic_vector (31 DOWNTO 0);
      MemWait     : OUT    std_logic;
      aMemAddr    : OUT    std_logic_vector (31 DOWNTO 0);
      aMemRead    : OUT    std_logic;
      aMemWrData  : OUT    std_logic_vector (31 DOWNTO 0);
      aMemWrite   : OUT    std_logic;
      cMemData    : OUT    std_logic_vector (31 DOWNTO 0);
      cMemHit     : OUT    std_logic;
      finalHalt   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT localCPU
   PORT (
      CLK         : IN     std_logic ;
      nReset      : IN     std_logic ;
      ramState    : IN     std_logic_vector (1 DOWNTO 0);
      MEM_MEM2REG : OUT    std_logic ;
      IF_Instr    : IN     std_logic_vector (31 DOWNTO 0);
      PC          : OUT    std_logic_vector (31 DOWNTO 0);
      MEM_MemWr   : OUT    std_logic ;
      MEM_Out     : OUT    std_logic_vector (31 DOWNTO 0);
      hit         : IN     std_logic ;
      WB_Halt     : OUT    std_logic ;
      cpuwait     : IN     std_logic ;
      MEM_ramOut  : IN     std_logic_vector (31 DOWNTO 0);
      MEM_BusB    : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Arbitor USE ENTITY multiCore_lib.Arbitor;
   FOR ALL : IcacheTop USE ENTITY multiCore_lib.IcacheTop;
   FOR ALL : coheranceCont USE ENTITY multiCore_lib.coheranceCont;
   FOR ALL : dcache USE ENTITY multiCore_lib.dcache;
   FOR ALL : localCPU USE ENTITY multiCore_lib.localCPU;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 cpuNdcacheStop0
   -- cpu0Stop 1                                        
   cpuwait0 <= (arbWait0 or cwait0);
   aMemWait0 <= '1' when cMemWait0 ='1' else -- normal control over dcache
               '1' when MemWait0 ='0' and cpuwait0 ='1' else -- need to keep dcache in update while pipe is paused
               '0';
               

   -- HDL Embedded Text Block 2 cpuNdcahceStop
   -- cpu1Stop 2                                        
   cpuwait1 <= (arbWait1 or cwait1);
   aMemWait1 <= '1' when cMemWait1 ='1' else -- normal control over dcache
               '1' when MemWait1 ='0' and cpuwait1 ='1' else -- need to keep dcache in update while pipe is paused
               '0';
       
   


   -- Instance port mappings.
   MemArb : Arbitor
      PORT MAP (
         CLK        => CLK,
         nReset     => nReset,
         ramQ       => ramQ,
         ramState   => ramState,
         aiMemAddr1 => aiMemAddr1,
         aiMemRead1 => aiMemRead1,
         aiMemData1 => aiMemData1,
         iMemRead1  => iMemRead1,
         ramAddr    => ramAddr,
         ramData    => ramData,
         ramRen     => ramRen,
         ramWen     => ramWen,
         aiMemRead0 => aiMemRead0,
         aiMemAddr0 => aiMemAddr0,
         aMemRead   => aMemRead,
         aMemWrite  => aMemWrite,
         aMemAddr   => aMemAddr,
         aMemRdData => aMemRdData,
         arbWait1   => arbWait1,
         arbWait0   => arbWait0,
         busy       => busy,
         iMemRead0  => iMemRead0,
         aiMemData0 => aiMemData0
      );
   icache : IcacheTop
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         iMemRead   => iMemRead0,
         ihit       => ihit0,
         iMemAddr   => PC0,
         iMemData   => iMemData0,
         aiMemState => ramState,
         aiMemData  => aiMemData0,
         aiMemRead  => aiMemRead0,
         aiMemAddr  => aiMemAddr0
      );
   icache1 : IcacheTop
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         iMemRead   => iMemRead1,
         ihit       => ihit1,
         iMemAddr   => PC1,
         iMemData   => iMemData1,
         aiMemState => aiMemState,
         aiMemData  => aiMemData1,
         aiMemRead  => aiMemRead1,
         aiMemAddr  => aiMemAddr1
      );
   ChrCont : coheranceCont
      PORT MAP (
         CLK          => CLK,
         MemWait0     => MemWait0,
         MemWait1     => MemWait1,
         aMemAddr0    => aMemAddr0,
         aMemAddr1    => aMemAddr1,
         aMemRdData   => aMemRdData,
         aMemRead0    => aMemRead0,
         aMemRead1    => aMemRead1,
         aMemWrData0  => aMemWrData0,
         aMemWrData1  => aMemWrData1,
         aMemWrite0   => aMemWrite0,
         aMemWrite1   => aMemWrite1,
         busy         => busy,
         cMemData     => cMemData,
         cMemData0    => cMemData0,
         cMemHit      => cMemHit,
         cMemHit0     => cMemHit0,
         finalHalt0   => finalHalt0,
         finalHalt1   => finalHalt1,
         nReset       => nReset,
         ramState     => ramState,
         aMemAddr     => aMemAddr,
         aMemRdData0  => aMemRdData0,
         aMemRdData1  => aMemRdData1,
         aMemRead     => aMemRead,
         aMemWrite    => aMemWrite,
         cMemAddr     => cMemAddr,
         cMemAddr0    => cMemAddr0,
         cMemSnoopEn  => cMemSnoopEn,
         cMemSnoopEn0 => cMemSnoopEn0,
         cMemWait0    => cMemWait0,
         cMemWait1    => cMemWait1,
         cWait0       => cWait0,
         cWait1       => cWait1
      );
   dcache1 : dcache
      PORT MAP (
         CLK         => CLK,
         nReset      => nReset,
         Halt        => WB_Halt0,
         MemRead     => MEM_MEM2REG0,
         MemWrite    => MEM_MemWr0,
         MemWait     => MemWait0,
         MemAddr     => MEM_Out0,
         MemRdData   => MemRdData0,
         MemWrData   => MEM_BusB0,
         finalHalt   => finalHalt0,
         aMemWait    => aMemWait0,
         aMemState   => ramState,
         aMemRead    => aMemRead0,
         aMemWrite   => aMemWrite0,
         aMemAddr    => aMemAddr0,
         aMemRdData  => aMemRdData0,
         aMemWrData  => aMemWrData0,
         cMemSnoopEn => cMemSnoopEn0,
         cMemAddr    => cMemAddr0,
         cMemData    => cMemData0,
         cMemHit     => cMemHit0
      );
   dchache2 : dcache
      PORT MAP (
         CLK         => CLK,
         nReset      => nReset,
         Halt        => WB_Halt1,
         MemRead     => MEM_MEM2REG1,
         MemWrite    => MEM_MemWr1,
         MemWait     => MemWait1,
         MemAddr     => MEM_Out1,
         MemRdData   => MemRdData,
         MemWrData   => MEM_BusB1,
         finalHalt   => finalHalt1,
         aMemWait    => aMemWait1,
         aMemState   => ramState,
         aMemRead    => aMemRead1,
         aMemWrite   => aMemWrite1,
         aMemAddr    => aMemAddr1,
         aMemRdData  => aMemRdData1,
         aMemWrData  => aMemWrData1,
         cMemSnoopEn => cMemSnoopEn,
         cMemAddr    => cMemAddr,
         cMemData    => cMemData,
         cMemHit     => cMemHit
      );
   cpu0 : localCPU
      PORT MAP (
         CLK         => CLK,
         nReset      => nReset,
         ramState    => ramState,
         MEM_MEM2REG => MEM_MEM2REG0,
         IF_Instr    => iMemData0,
         PC          => PC0,
         MEM_MemWr   => MEM_MemWr0,
         MEM_Out     => MEM_Out0,
         hit         => ihit0,
         WB_Halt     => WB_Halt0,
         cpuwait     => cpuwait0,
         MEM_ramOut  => MemRdData0,
         MEM_BusB    => MEM_BusB0
      );
   cpu1 : localCPU
      PORT MAP (
         CLK         => CLK,
         nReset      => nReset,
         ramState    => ramState,
         MEM_MEM2REG => MEM_MEM2REG1,
         IF_Instr    => iMemData1,
         PC          => PC1,
         MEM_MemWr   => MEM_MemWr1,
         MEM_Out     => MEM_Out1,
         hit         => ihit1,
         WB_Halt     => WB_Halt1,
         cpuwait     => cpuwait1,
         MEM_ramOut  => MemRdData,
         MEM_BusB    => MEM_BusB1
      );

END struct;
